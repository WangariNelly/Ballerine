// vite.config.ts
import { sentryVitePlugin } from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/@sentry+vite-plugin@2.23.0/node_modules/@sentry/vite-plugin/dist/esm/index.mjs";
import react from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/@vitejs+plugin-react@4.3.4__16ee381030294e4598ac4c35655bda46/node_modules/@vitejs/plugin-react/dist/index.mjs";
import * as childProcess from "child_process";
import * as fs from "fs";
import * as path from "path";
import tailwindcss from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/tailwindcss@3.4.17_ts-node@_4bec1f36aa8524af7d3648b845c683e4/node_modules/tailwindcss/lib/index.js";
import checker from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/vite-plugin-checker@0.6.4_e_9a0a9a6d412510c039bfbaed29b282f0/node_modules/vite-plugin-checker/dist/esm/main.js";
import terminal from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/vite-plugin-terminal@1.2.0__b0131695604d8a065b09aa374c8d249f/node_modules/vite-plugin-terminal/dist/index.mjs";
import topLevelAwait from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/vite-plugin-top-level-await_89e93ae981a144a9283a715f3f4cb73b/node_modules/vite-plugin-top-level-await/exports/import.mjs";
import tsconfigPaths from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/vite-tsconfig-paths@4.3.2_t_dac31e2fc54fa040414119e346315db6/node_modules/vite-tsconfig-paths/dist/index.mjs";
import { defineConfig } from "file:///D:/BackOffice/ballerine/node_modules/.pnpm/vitest@0.34.6_jsdom@20.0.3__54635b6825d864adc7a27a3a1f657377/node_modules/vitest/dist/config.js";

// package.json
var version = "0.3.124";

// vite.config.ts
var __vite_injected_original_dirname = "D:\\BackOffice\\ballerine\\apps\\kyb-app";
var packageJson = JSON.parse(
  fs.readFileSync(path.resolve(__vite_injected_original_dirname, "package.json"), "utf-8")
);
var plugins = [
  topLevelAwait({
    promiseExportName: "__tla",
    promiseImportName: (i) => `__tla_${i}`
  }),
  react(),
  tailwindcss(),
  checker({ typescript: true, overlay: false }),
  tsconfigPaths(),
  terminal({
    output: ["console", "terminal"],
    strip: false
  })
];
if (process.env.VITE_SENTRY_AUTH_TOKEN) {
  console.log("Initializing sentry");
  const isDevMode = process.env.VITE_ENVIRONMENT_NAME === "development" || process.env.VITE_ENVIRONMENT_NAME === "local";
  const sentryConfig = {
    debug: isDevMode,
    authToken: process.env.VITE_SENTRY_AUTH_TOKEN,
    org: "ballerine-5s",
    project: "collection-flow",
    release: {
      dist: childProcess.execSync("git rev-parse HEAD").toString().trim(),
      setCommits: {
        auto: true
      }
    },
    sourcemaps: {
      assets: ["./dist/assets"],
      ignore: ["node_modules"]
    }
  };
  plugins.push(sentryVitePlugin(sentryConfig));
}
var vite_config_default = defineConfig({
  server: {
    port: 5201,
    open: true
  },
  preview: {
    port: 5201
  },
  build: {
    sourcemap: true,
    rollupOptions: {
      output: {
        entryFileNames: `assets/[name]-${version}.[hash].js`,
        chunkFileNames: `assets/[name]-${version}.[hash].js`,
        assetFileNames: `assets/[name]-${version}.[hash].[ext]`
      }
    }
  },
  plugins,
  test: {
    environment: "jsdom",
    globals: true,
    setupFiles: "./tests/setup.js"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
